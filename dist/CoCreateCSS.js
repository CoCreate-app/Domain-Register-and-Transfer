/*! For license information please see CoCreateCSS.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.css=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-components/CoCreate-observer/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.counter = 0;\nwindow.counter2 = 0;\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n  __init: function () {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer)); // setTimeout(()=>{\n\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true\n    });\n  },\n  // init: function(data) {\n  //   this.add(data);\n  // },\n  init: function ({\n    observe,\n    include,\n    exclude,\n    attributes,\n    name,\n    callback\n  }) {\n    if (observe.some(x => x == "childList")) {\n      this.initTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n\n    if (observe.some(x => x == "attributes")) {\n      this.attrTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n  },\n  remove: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  addRule: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  removeRule: function ({\n    name\n  }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n  __callback: function (mutationsList, observer) {\n    // console.log(this)\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation);\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n  __initCallback: function (mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n    this.initTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      mutation.addedNodes.forEach(el => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return;\n        }\n\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        }\n\n        if (el.created) return;\n        callback.apply(null, [{\n          type: mutation.type,\n          target: el\n        }]);\n      });\n    });\n    addedNodes.map(el => el.created = true);\n  },\n  __attrCallback: function (mutation) {\n    for (let [name, {\n      include,\n      exclude\n    }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n\n    this.attrTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n\n        if (newValue != mutation.oldValue) {\n          callback.apply(null, [mutation]);\n        }\n      }\n    });\n  },\n  setInitialized: function (element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n  getInitialized: function (element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n\n    if (!element[key]) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n\nCoCreateObserver.__init();\n\nwindow.CoCreateObserver = CoCreateObserver;\nvar _default = CoCreateObserver;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-observer/src/index.js\n')},"./src/index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-components/CoCreate-observer/src */ "../CoCreate-components/CoCreate-observer/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* Parsing CSS for Utility CSS*/\nlet styleEl = document.createElement("style");\nstyleEl.setAttribute(\'component\', \'CoCreateCss\');\ndocument.head.appendChild(styleEl);\nvar utilityClassList = [];\nvar myStyle;\nwindow.addEventListener("load", function () {\n  _src.default.init({\n    name: "ccCss",\n    observe: ["attributes", "childList"],\n    attributes: ["class"],\n    callback: mutation => {\n      if (mutation.type == "childList") mutation.target.querySelectorAll("*").forEach(el => {\n        addParsingClassList(el.classList);\n      });\n      addParsingClassList(mutation.target.classList);\n      sortRules();\n    }\n  });\n\n  myStyle = styleEl.sheet;\n  let elements = document.querySelectorAll("[class]");\n\n  for (let element of elements) {\n    addParsingClassList(element.classList);\n  }\n\n  sortRules();\n});\n\nfunction sortRules() {\n  let ruleList = [];\n  let length = utilityClassList.length;\n\n  for (let i in utilityClassList) {\n    ruleList.push(myStyle.cssRules[length - i - 1]);\n    myStyle.deleteRule(length - i - 1);\n  }\n\n  let swapped;\n\n  for (let i = 0; i < length; i++) {\n    swapped = false;\n\n    for (let j = length - 1; j > i; j--) {\n      if (utilityClassList[j - 1] > utilityClassList[j]) {\n        let temp = utilityClassList[j];\n        utilityClassList[j] = utilityClassList[j - 1];\n        utilityClassList[j - 1] = temp;\n        temp = ruleList[j];\n        ruleList[j] = ruleList[j - 1];\n        ruleList[j - 1] = temp;\n        swapped = true;\n      }\n    }\n\n    if (swapped == false) break;\n  }\n\n  for (let i = 0; i < length; i++) {\n    myStyle.insertRule(ruleList[i].cssText);\n  }\n}\n\nfunction addParsingClassList(classList) {\n  let re = /.+:.+/;\n\n  for (let classname of classList) {\n    try {\n      if (re.exec(classname)) {\n        if (utilityClassList.indexOf(classname) == -1) {\n          let re_at = /.+@.+/;\n\n          if (re_at.exec(classname)) {\n            let parts = classname.split("@");\n            let main_rule = parseClass(classname);\n            const range_names = ["xs", "sm", "md", "lg", "xl"];\n            const ranges = [[0, 567], [576, 768], [769, 992], [993, 1200], [1201, 0]];\n\n            for (let i = 1; i < parts.length; i++) {\n              let range_num = range_names.indexOf(parts[i]);\n              if (range_num == -1) continue;\n              let range = ranges[range_num];\n              let prefix = "@media screen";\n\n              if (range[0] != 0) {\n                prefix += " and (min-width:" + range[0] + "px)";\n              }\n\n              if (range[1] != 0) {\n                prefix += " and (max-width:" + range[1] + "px)";\n              }\n\n              let rule = prefix + "{" + main_rule + "}";\n              myStyle.insertRule(rule);\n              utilityClassList.push(classname);\n            }\n          } else {\n            let rule = parseClass(classname);\n            myStyle.insertRule(rule);\n            utilityClassList.push(classname);\n          }\n        }\n      }\n    } catch (e) {}\n  }\n}\n\nfunction parseClass(classname) {\n  let res = classname.split(":");\n  let rule = "";\n  let suffix = res[1].replace(/\\./g, "\\\\.").replace(/%/, "\\\\%").replace(/@/g, "\\\\@").replace(/\\(/g, "\\\\(").replace(/\\)/g, "\\\\)").replace(/#/g, "\\\\#").replace(/,/g, "\\\\,").replace(/!/, "\\\\!");\n  res[1] = res[1].split("@")[0];\n  res[1] = res[1].replace(/_/g, " ");\n\n  if (res.length > 2) {\n    let pseudo = [];\n\n    for (let i = 0; i < res.length - 2; i++) {\n      suffix += "\\\\:" + res[2 + i];\n      pseudo.push(":" + res[2 + i]);\n    }\n\n    let clsname = "." + res[0] + "\\\\:" + suffix;\n    rule += clsname + pseudo[0];\n\n    for (let i = 1; i < pseudo.length; i++) {\n      rule += ", " + clsname + pseudo[i];\n    }\n\n    rule += `{${res[0]}:${res[1]}}`;\n  } else {\n    rule = `.${res[0]}\\\\:${suffix}{${res[0]}:${res[1]}}`;\n  }\n\n  return rule;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));